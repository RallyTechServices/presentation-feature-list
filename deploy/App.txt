<!DOCTYPE html>
<html>
<head>
    <title>Presentation Feature List</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Jul 17 2015 10:39:55 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Jul 17 2015 10:39:55 GMT-0600 (MDT)";
        var CHECKSUM = 13070717710;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.PrettyFeatureGrid',{
    extend: 'Ext.grid.Panel',
    alias: 'widget.tsfeaturegrid',

    config: {
        linkField: null,
        linkFieldURL: null,
        publishedField: null,
        modelName: null
    },

    columns: [{
        flex: 1,
        dataIndex: 'Name'
    }],

    plugins: [{
        ptype: 'rowexpander',
        rowBodyTpl: new Ext.XTemplate('<p>{Description}</p>{[this.getLink(values)]}',{
            getLink: function(values){
                if (values[this.linkField] && values[this.linkField].LinkID && this.linkFieldURL){

                    var link = this.linkFieldURL.replace('${id}',values[this.linkField].LinkID);
                    return Ext.String.format('<br/><span class="more-info"><a href="{0}" target="_blank">More Info</a></span>',link);
                }
            }
        })
    }],

    title: 'Loading...',
    hideHeaders: true,
    collapsible: true,
    animCollapse: false,
    collapsed: true,
    width: '100%',
    flex: 1,
    hideCollapseTool: true,
    titleCollapse: true,
    margin: '5 5 5 5',
    scroll: false,
    header: {
        cls: 'feature-header',
        padding: 20
    },

    fetchList: ['FormattedID','Name','Description','State','Archived'],

    constructor: function(config) {
        this.mergeConfig(config);

        this.itemId = 'pnl-' + config.state;

        var filters = [{
            property: 'State.Name',
            value: config.state
        },{
            property: 'Archived',
            value: false
        }];

        if (config.publishedField){
            filters.push({
                property: config.publishedField,
                value: true
            });
        }

        this.findPlugin('rowexpander').rowBodyTpl.linkField = config.linkField;
        this.findPlugin('rowexpander').rowBodyTpl.linkFieldURL = config.linkFieldURL;

        var fetch = this.fetchList.concat([config.linkField, config.publishedField]);
        this.store = Ext.create('Rally.data.wsapi.Store',{
            model: config.modelName,
            fetch: fetch,
            autoLoad: true,
            context: this.context,
            filters: filters,
            listeners: {
                scope: this,
                load: function(store,records,success){
                    this._setTitle(config.label, config.description, store.getTotalCount());
                }
            }
        });

        this.callParent(arguments);
        this.on('expand', this._onExpand, this);
        this.on('collapse', this._onExpand, this);

    },
    _setTitle: function(label, description, recordCount){
        var num_items = recordCount || 0,
            title = Ext.String.format('<span class="feature-header-title">{0}</span><span class="feature-header-description">&nbsp;({1}) {2}</span><div class="control chevron {3}"></div>',label, num_items, description, "icon-chevron-right");
        this.setTitle(title);
    },

    _onExpand: function(){
        var icon_class = this.collapsed ? "icon-chevron-right" : "icon-chevron-down",
            prev_icon_class = this.collapsed ? "icon-chevron-down" : "icon-chevron-right";
        var title = this.getHeader().title.replace(prev_icon_class, icon_class);
        this.suspendLayout = true;
        this.setTitle(title);
        this.suspendLayout = false;
   }
});

Ext.define('Rally.technicalservices.BooleanFieldComboBox',{
    extend: 'Rally.ui.combobox.FieldComboBox',
    alias: 'widget.tsbooleanfieldcombobox',

    _isNotHidden: function(field) {
        return (!field.hidden && field.attributeDefinition && field.attributeDefinition.AttributeType == 'BOOLEAN');
    }
});

Ext.define('Rally.technicalservices.WebLinkFieldComboBox',{
    extend: 'Rally.ui.combobox.FieldComboBox',
    alias: 'widget.tsweblinkfieldcombobox',

    _isNotHidden: function(field) {
        return (!field.hidden && field.attributeDefinition && field.attributeDefinition.AttributeType == 'WEB_LINK');
    }
});

Ext.define('Rally.technicalservices.StateMapper',{
    extend: 'Ext.form.field.Base',
    alias: 'widget.tsmappersettings',
    config: {
        value: undefined,
        states: undefined,
        decodedValue: {}
    },
    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: '100%',
    cls: 'column-settings',

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        var decodedValue = {};
        if (this.value && !_.isEmpty(this.value)){
            decodedValue = Ext.JSON.decode(this.value);
        }
        this.callParent(arguments);

        var data = [];
        _.each(this.states, function(s){
            var dsp = false,
                lbl = s,
                desc = '';

            if (decodedValue[s]){
                dsp = true;
                lbl = decodedValue[s].label;
                desc = decodedValue[s].description;
            }
            data.push({stateName: s, display: dsp, label: lbl, description: desc})
        }, this);

        this._store = Ext.create('Ext.data.Store', {
            fields: ['stateName', 'display', 'label', 'description'],
            data: data
        });

        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            enableRanking: false,
            store: this._store,
            editingConfig: {
                publishMessages: false
            }
        });
    },

    _getColumnCfgs: function() {
        var columns = [
            {
                text: 'State',
                dataIndex: 'stateName'
            },
            {
                text: 'Show',
                dataIndex: 'display',
                renderer: function (value) {
                    return value === true ? 'Yes' : 'No';
                },
                editor: {
                    xtype: 'rallycombobox',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    storeType: 'Ext.data.Store',
                    storeConfig: {
                        remoteFilter: false,
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Yes', 'value': true},
                            {'name': 'No', 'value': false}
                        ]
                    }
                }
            },
            {
                text: 'Label',
                dataIndex: 'label',
                emptyCellText: '-- No Mapping --',
                editor: {
                    xtype: 'rallytextfield'
                }
            },
            {
                text: 'Description',
                dataIndex: 'description',
                emptyCellText: '',
                flex: 1,
                editor: {
                    xtype: 'rallytextfield'
                }
            }
        ];
        return columns;
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },
    _buildSettingValue: function() {
        var mappings = {};
        this._store.each(function(record) {
            if (record.get('display')) {
                mappings[record.get('stateName')] = {
                    label: record.get('label'),
                    description: record.get('description')
                };
            }
        }, this);
        return mappings;
    },

    getErrors: function() {
        var errors = [];
        if (this._storeLoaded && !Ext.Object.getSize(this._buildSettingValue())) {
            errors.push('At least one state must be mapped and displayed.');
        }
        return errors;
    },

    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    }
});


Ext.define("presentation-feature-list", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'settings_box'},
        {xtype:'tsinfolink'}
    ],

    config: {
        defaultSettings: {
            stateMappings: {},
            linkField: 'c_PublishToRoadmapURL',
            publishedField: 'c_PublishToRoadmap',

        }
    },
    modelType: 'PortfolioItem/Features', //cc ,
    linkFieldURL: null,
    modelStates: undefined,
    model: null,
    externalAppSettingsKey: 'technicalServicesRoadmapAppSettings',

    launch: function(){
        Rally.data.ModelFactory.getModel({
            type: this.modelType,
            scope: this,
            success: function(model) {
                this.model = model;
                model.getField('State').getAllowedValueStore().load({
                    scope: this,
                    callback: function(records, operation, success) {
                        if (success){
                            var modelStates = [];
                            Ext.Array.each(records, function(allowedValue) {
                                if (allowedValue.get('StringValue') && allowedValue.get('StringValue').length > 0){
                                    modelStates.push(allowedValue.get('StringValue'));
                                }
                            });
                            this.modelStates = modelStates;
                            if (this.isExternal()){
                               // this.showSettings(this.config)
                                this.getExternalAppSettings(this.externalAppSettingsKey);
                            } else {
                                this.onSettingsUpdate(this.getSettings());
                            }
                        } else {
                            Rally.ui.notify.Notifier.showError({message: Ext.String.format('Unable to load State field values for {0}: [{1}]',this.modelType, operations.error.errors.join(', '))});
                        }
                    }
                });
            },
            failure: function(){
                Rally.ui.notify.Notifier.showError({message: Ext.String.format('Unable to load model type [{0}]',this.modelType)});
            }
        });
    },
    _prepareApp: function(){
        var model = this.model;
        if (model && model.getField(this.linkField) && model.getField(this.linkField).attributeDefinition){
            this.linkFieldURL = model.getField(this.linkField).attributeDefinition.URL;
        }
        this._addProjectPicker();
    },
    _addProjectPicker: function(){


        if (_.isEmpty(this.stateMappings)){
            this.add({
                xtype: 'container',
                itemId: 'ct-no-settings',
                flex: 1,
                style: {
                    textAlign: 'center'
                },
                html: '<b>No states are configured to be displayed.  Please use the App Settings to display at least one State</b>'
            });
            return;
        }
        if (this.down('#ct-no-settings')){
            this.down('#ct-no-settings').destroy();
        }
        this.add({
            xtype: 'rallycombobox',
            storeConfig: {
                autoLoad: true,
                model: 'Project',
                fetch: ['_ref','Name'],
                filters: [{
                    property: 'Parent',
                    value: this.getContext().getProject()._ref
                }],
                remoteSort: false,
                remoteFilter: true
            },
            listeners: {
                scope: this,
                ready: function(cb){
                    this._buildPrettyGrid({project: cb.getValue(), projectScopeDown: true},
                        this.stateMappings);
                },
                change: function(cb){
                    this._buildPrettyGrid({project: cb.getValue(), projectScopeDown: true},
                        this.stateMappings);
                }
            },
            valueField: '_ref',
            displayField: 'Name',
            fieldLabel: 'Select Project'
        });
    },
    _buildPrettyGrid: function(projectContext, stateMappings){

        var state_panels = [];

        _.each(stateMappings, function(obj, state){
            state_panels.push({
                xtype: 'tsfeaturegrid',
                state: state,
                label: obj.label,
                context: projectContext,
                description: obj.description,
                modelName: this.modelType,
                linkField: this.linkField,
                linkFieldURL: this.linkFieldURL,
                publishedField: this.publishedField
            });
        }, this);

        if (this.down('#pretty-pnl')){
            this.down('#pretty-pnl').destroy();
        }

        var pnl = Ext.create('Ext.panel.Panel', {
            itemId: 'pretty-pnl',
            flex: 1,
            border: 0,
            header: this._getHeaderPanel(stateMappings),

            defaults: {
                // applied to each contained panel
                bodyStyle: 'padding:15px'
            },
            layout: {
                // layout-specific configs go here
                type: 'vbox',
                titleCollapse: false,
                animate: true,
               // activeOnTop: true
            },
            scope: this,
            items: state_panels
        });
        this.add(pnl);
    },
    _getHeaderPanel: function(stateMappings){

        var buttons = [];
        _.each(stateMappings, function(obj, key){
            buttons.push({
                xtype: 'button',
                itemId: 'btn-' + key,
                text: obj.label,
                textAlign: 'left',
                cls: 'feature-summary-header',
                flex: 1,
                height: 20,
                listeners: {
                    scope: this,
                    click: this._onButtonClick
                }
            });
        }, this);


        return {
            collapsible: false,
            collapsed: false,
            width: '100%',
            flex: 1,
            padding: 15,
            margin: '5 5 5 5',
            items: buttons,
            cls: 'feature-summary-header'
        };
    },
    _onButtonClick: function(btn){
        this.logger.log('_onButtonClick', btn.itemId);

        var buttons = this.query('button');

        _.each(buttons, function(b){
            var pid = b.itemId.replace('btn-','#pnl-');
            if (this.down(pid) && b.itemId == btn.itemId){
                this.down(pid).expand();
            } else {
                this.down(pid).collapse();
            }
        }, this);
    },
    /********************************************
     /* Overrides for App class
     /*
     /********************************************/
    //getSettingsFields:  Override for App
    getSettingsFields: function() {
        var me = this;

        return [
            {
                name: 'publishedField',
                xtype: 'tsbooleanfieldcombobox',
                fieldLabel: 'Published Field',
                model: this.modelType,
                labelWidth: 200,
                labelAlign: 'right',
                minValue: 0
            },{
                name: 'linkField',
                xtype: 'tsweblinkfieldcombobox',
                model: this.modelType,
                fieldLabel: 'Publish To Roadmap Link Field',
                labelWidth: 200,
                labelAlign: 'right',
                minValue: 0
            },{
                name: 'encodedStateMapping',
                xtype: 'tsmappersettings',
                states: this.modelStates,
                fieldLabel: 'State Mappings',
                margin: 15,
                labelAlign: 'top'
            }
        ];
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    showSettings: function(options) {
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            fields: this.getSettingsFields(),
            settings: this.getSettings(),
            defaultSettings: this.getDefaultSettings(),
            context: this.getContext(),
            settingsScope: this.settingsScope,
            autoScroll: true
        }, options));

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        if (this.isExternal()){
            if (this.down('#settings_box').getComponent(this._appSettings.id)==undefined){
                this.down('#settings_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    _onSettingsSaved: function(settings){
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.saveExternalAppSettings(this.externalAppSettingsKey, settings);
        if (!_.isEmpty(settings.encodedStateMapping)){
            this.stateMappings = Ext.JSON.decode(settings.encodedStateMapping);
        } else {
            this.stateMappings = {};
        }
        this._prepareApp();
    },
    saveExternalAppSettings: function(key, settings){

        var prefs = {};
        _.each(settings, function(val, setting_key){
            var pref_key = key + '.' + setting_key;
            prefs[pref_key] = val;
        });

        this.logger.log('SaveExternalAppSettings', key, settings, prefs);
        Rally.data.PreferenceManager.update({
            project: this.getContext().getProject()._ref,
            settings: prefs,
            scope: this,
            success: function(updatedRecords, notUpdatedRecords) {
               this.logger.log('settings saved', key, updatedRecords, notUpdatedRecords);
            }
        });
    },
    getExternalAppSettings: function(key){
        Rally.data.PreferenceManager.load({
            project: this.getContext().getProject()._ref,
            additionalFilters: [{
                property: 'name',
                operator: 'contains',
                value: key
            }],
            scope: this,
            cache: false,
            success: function(prefs) {
                this.logger.log('settings loaded', key, prefs);
                _.each(prefs, function(val, pref_name){
                    if (/\.linkField$/.test(pref_name)){
                        this.linkField = val;
                    }
                    if (/\.publishedField$/.test(pref_name)){
                        this.publishedField = val;
                    }
                    if (/\.encodedStateMapping$/.test(pref_name)){
                        if (val && !_.isEmpty(val)){
                            this.stateMappings = Ext.JSON.decode(val);
                        }
                    }
                }, this);

                this._prepareApp();
            }
        });

    }
});

            
               Rally.launchApp('presentation-feature-list', {
                   name: 'Presentation Feature List'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.feature-header {
    background-color: #eb3c00;
    padding: '10px';
    color: #FFFFFF;
}
.feature-summary-header {
    background-color: #505050;
    color: white;
    font-weight: bold;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    text-transform: uppercase;
    font-size: 14px;
}
.feature-header-title {
    color: white;
    font-weight: bold;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
}
.feature-header-description {
    text-transform: none!important;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    font-size: 12px;
}
.x-panel-header-text-container-default {
    color: white;
    font-size: 14px;
    font-weight: normal;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    text-transform: uppercase;
}
.chevron {
    text-align: center;
    vertical-align: middle;
    border-style: solid;
    border-color: white;
    border-width: 1px;
    border-radius: 3px;
    color: white;
    font-size: 14px;
    font-weight: bold;
    background: transparent;
    position: absolute;
    right: 10px;
    width: 16px;
    height: 16px;
}
.x-panel-body-default {
    border-color: #d6d6d6;
    border: 0px;
}


.more-info {
    background-color: #eb3c00;
    padding: 10px;
    margin: 10px;
    color: white;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    text-transform: uppercase;
    font-size: 10px;
    right: 100px;
}
a:link {
    color: white;
}

/* visited link */
a:visited {
    color: white;
}

/* mouse over link */
a:hover {
    color: white;
}

/* selected link */
a:active {
    color: white;
}

    </style>

</head>
<body></body>
</html>